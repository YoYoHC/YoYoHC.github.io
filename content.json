{"meta":{"title":"YoYo","subtitle":"YoYo","description":"欢迎来到我的博客","author":"HJC","url":"http://yoyohc.github.io","root":"/"},"pages":[{"title":"分类","date":"2020-01-20T09:53:59.000Z","updated":"2020-01-20T10:13:43.551Z","comments":true,"path":"categories/index.html","permalink":"http://yoyohc.github.io/categories/index.html","excerpt":"","text":""},{"title":"这是关于界面","date":"2020-01-20T09:51:52.000Z","updated":"2020-01-20T09:52:22.837Z","comments":true,"path":"about/index.html","permalink":"http://yoyohc.github.io/about/index.html","excerpt":"","text":"这是我的界面"}],"posts":[{"title":"Ubantu挂载多摄像头监控","slug":"bantu挂载多摄像头监控","date":"2020-03-14T02:49:00.000Z","updated":"2020-03-14T03:55:11.456Z","comments":true,"path":"2020/03/14/bantu挂载多摄像头监控/","link":"","permalink":"http://yoyohc.github.io/2020/03/14/bantu%E6%8C%82%E8%BD%BD%E5%A4%9A%E6%91%84%E5%83%8F%E5%A4%B4%E7%9B%91%E6%8E%A7/","excerpt":"","text":"Ubantu下挂载多摄像头使用Blynk进行切换局域网进行监控废话不多说开始折腾！！简单说一下Blynk是用来操作物联网的，不知道的自行百度哦！这里我们的监控是本地局域网的，如果个人有服务器可以按照步骤架设到服务器端。 挂载摄像头第一步当然是将摄像头连接到ubantu设备，这里使用树莓派是可以的，接下来检测摄像头是否已经挂载，可以挂载多个有几个USB口就可以挂载几个。 1、打开终端输入命令查看摄像头是否挂载1$ lsusb 安装nginxnginx是我们这里的关键用来建立服务器将视频推流到客户端 1、安装依赖库1234$ sudo apt-get install build-essential libpcre3 libpcre3-dev libssl-dev$ sudo apt-get install zlib1g-dev$ sudo apt-get install openssl$ sudo apt install gcc 2、建立工作目录12$ mkdir ~/working$ cd ~/working 3、下载 nginx 和 nginx-rtmp源码这里我们使用源码的方式进行安装,由于我使用的是ubantu 18.04.2所以下载的是最新版的nginx，这里保证nginx是最新版应该就不会出现问题，这里使用的是1.17.9版本。 12$ wget http://nginx.org/download/nginx-1.17.9.tar.gz$ wget https://github.com/arut/nginx-rtmp-module/archive/master.zip 4、安装解压工具1$ sudo apt-get install unzip 5、解压 nginx 和 nginx-rtmp安装包12$ tar -zxvf nginx-1.17.9.tar.gz$ unzip master.zip 6、切换到 nginx-目录1$ cd nginx-1.17.9 7、添加 nginx-rtmp 模板编译到 nginx1$ ./configure --with-http_ssl_module --add-module=../nginx-rtmp-module-master 8、编译安装12$ sudo make$ sudo make install 9、安装nginx init 脚本123$ sudo wget https://raw.github.com/JasonGiedymin/nginx-init-ubuntu/master/nginx -O /etc/init.d/nginx$ sudo chmod +x /etc/init.d/nginx$ sudo update-rc.d nginx defaults 10、启动和停止nginx 服务，生成配置文件此处可能会有错误，无需管它继续往下就行。 12$ sudo service nginx start$ sudo service nginx stop 11、安装 FFmpeg123$ sudo apt-add-repository ppa:jon-severinsson/ffmpeg$ sudo apt-get update$ sudo apt-get install ffmpeg 12、配置 nginx-rtmp 服务器打开 /usr/local/nginx/conf/nginx.conf,这里使用的是nano编辑器，如果提示没有nano请自行百度安装。 1$ sudo nano /usr/local/nginx/conf/nginx.conf 在末尾添加如下 配置,其中的listen是服务器的端口号更改或者默认都行！ 12345678910111213141516$ rtmp &#123; server &#123; listen 1935; chunk_size 4096; application live &#123; live on; record off; exec ffmpeg -i rtmp://localhost/live/$name -threads 1 -c:v libx264 -profile:v baseline -b:v 350K -s 640x360 -f flv -c:a aac -ac 1 -strict -2 -b:a 56k rtmp://localhost/live360p/$name; &#125; application live360p &#123; live on; record off; &#125; &#125;&#125; 13、启动服务器文件编辑后保存然后启动服务 123$ cd ~$ cd /usr/local/nginx/sbin$ sudo ./nginx 14、查看是否启动成功1$ ps -ef|grep nginx 代码部分该部分代码在Ubantu系统上运行，代码直接贴上来自行修改！修改代码中的Blynk授权码，Blynk服务器地址，机器IP地址，代码中已经使用文字提示。这里要使用的库如果没有自行安装这里不做安装教程！ 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112import cv2import queueimport osimport numpy as npfrom threading import Threadimport datetime, _threadimport subprocess as spimport timeimport blynklibblynk=blynklib.Blynk(\"修改为你的Blynk授权码\",server=\"Blynk服务器地址\",port=8080)@blynk.handle_event('write V1')def write_virtual_pin_handler(pin,_value): global index global iscreat iscreat=1 for i in range(0,len(_value)): try: _value[i]=eval(_value[i]) except:pass if len(_value)==1:_value=_value[0] index=_value passmutex = _thread.allocate_lock()frame_queue = queue.Queue()# 推流的地址，前端通过这个地址拉流，主机的IP，1935是ffmpeg在nginx中设置的端口号rtmpUrl = \"rtmp://修改你的机器IP地址:1935/live/1\"command = ['ffmpeg', '-y', '-f', 'rawvideo', '-vcodec', 'rawvideo', '-pix_fmt', 'bgr24', '-s', \"&#123;&#125;x&#123;&#125;\".format(640, 480), # 图片分辨率 '-r', str(25.0), # 视频帧率 '-i', '-', '-c:v', 'libx264', '-pix_fmt', 'yuv420p', '-preset', 'ultrafast', '-f', 'flv', rtmpUrl]flag=0def Video(): global index global iscreat index=0 iscreat=0 vid = cv2.VideoCapture(0) if not vid.isOpened(): raise IOError(\"Couldn't open webcam or video\") while (vid.isOpened()): if iscreat: vid.release() iscreat=0 if index==1: vid=cv2.VideoCapture(0) index=0 elif index==2: vid = cv2.VideoCapture(1) index = 0 elif index==3: vid = cv2.VideoCapture(2) index = 0 return_value, frame = vid.read() frame_queue.put(frame)def push_frame(): accum_time = 0 curr_fps = 0 fps = \"FPS: ??\" while True: if len(command) &gt; 0: p = sp.Popen(command, stdin=sp.PIPE) break while True: blynk.run() if frame_queue.empty() != True: frame = frame_queue.get() # curr_time = timer() # exec_time = curr_time - prev_time # prev_time = curr_time # accum_time = accum_time + exec_time # curr_fps = curr_fps + 1 # process frame # 你处理图片的代码 # 将图片从队列中取出来做处理，然后再通过管道推送到服务器上 # 增加画面帧率 # if accum_time &gt; 1: # accum_time = accum_time - 1 # fps = \"FPS: \" + str(curr_fps) # curr_fps = 0 # write to pipe # 将处理后的图片通过管道推送到服务器上,image是处理后的图片 p.stdin.write(frame.tostring())def run(): # 使用两个线程处理 thread1 = Thread(target=Video, ) thread1.start() thread2 = Thread(target=push_frame, ) thread2.start()if __name__ == '__main__': run() Blynk App设置代码中的Blynk授权码来自于Blynk App创建的工程中，百度！！！！创建一个Blynk工程分别添加两个组件 12Video Stream 组件Segmented Switch 组件 组件设置如下 这里使用了2个摄像头，所以使用了三个OPTIONS，按照你自己的摄像头数量自行添加或删除，选中你要删除的相机左滑即可删除，如果大于3个摄像头需要修改代码。 运行完毕！！","categories":[],"tags":[{"name":"Ubantu","slug":"Ubantu","permalink":"http://yoyohc.github.io/tags/Ubantu/"},{"name":"Blynk","slug":"Blynk","permalink":"http://yoyohc.github.io/tags/Blynk/"}],"author":"HJC"},{"title":"arduino","slug":"arduino","date":"2020-01-21T03:08:14.000Z","updated":"2020-01-21T03:24:40.386Z","comments":true,"path":"2020/01/21/arduino/","link":"","permalink":"http://yoyohc.github.io/2020/01/21/arduino/","excerpt":"","text":"这是一张图片看这里","categories":[],"tags":[]},{"title":"Hello World","slug":"hello-world","date":"2020-01-20T01:42:05.794Z","updated":"2020-01-20T01:42:05.794Z","comments":true,"path":"2020/01/20/hello-world/","link":"","permalink":"http://yoyohc.github.io/2020/01/20/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}]}