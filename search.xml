<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Jetson开启VNC</title>
    <url>/2020/03/25/Jetson%E5%BC%80%E5%90%AFVNC/</url>
    <content><![CDATA[<p>Jetson VNC远程桌面</p>
<a id="more"></a>
<h3 id="Jetson-Nano固定IP地址并开启VNC远程桌面"><a href="#Jetson-Nano固定IP地址并开启VNC远程桌面" class="headerlink" title="Jetson Nano固定IP地址并开启VNC远程桌面"></a>Jetson Nano固定IP地址并开启VNC远程桌面</h3><p>VNC开启VNC远程桌面并设置VNC服务器自启动</p>
<h5 id="1、固定IP地址"><a href="#1、固定IP地址" class="headerlink" title="1、固定IP地址"></a>1、固定IP地址</h5><p>由于Ubantu系统重启后IP地址不固定所以这里先固定IP地址</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo nano /etc/network/interface</span><br></pre></td></tr></table></figure>
<p>打开以后注释代码并在最后添加</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">auto ens32</span><br><span class="line">iface ens32 inet static</span><br><span class="line">address 192.168.159.130   <span class="comment">#你要固定的IP地址</span></span><br><span class="line">netmask 255.255.255.0</span><br><span class="line">gateway 192.168.2.1</span><br></pre></td></tr></table></figure>
<p><img src="/2020/03/25/Jetson%E5%BC%80%E5%90%AFVNC/%5Cimages%5Cpasted-6.png%5C" alt="最终效果"></p>
<h5 id="2、设置DNS"><a href="#2、设置DNS" class="headerlink" title="2、设置DNS"></a>2、设置DNS</h5><p>输入以下命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo nano /etc/resolvconf/resolv.conf.d/base</span><br></pre></td></tr></table></figure>
<p>在文档末尾添加一下代码</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nameserver 8.8.8.8</span><br><span class="line">nameserver 114.114.114.114</span><br></pre></td></tr></table></figure>
<h5 id="3、刷新配置文件"><a href="#3、刷新配置文件" class="headerlink" title="3、刷新配置文件"></a>3、刷新配置文件</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo resolvconf -u</span><br><span class="line">sudo /etc/init.d/networking restart</span><br></pre></td></tr></table></figure>
<h5 id="4、重新启动，设置完成！"><a href="#4、重新启动，设置完成！" class="headerlink" title="4、重新启动，设置完成！"></a>4、重新启动，设置完成！</h5><h3 id="开始设置VNC"><a href="#开始设置VNC" class="headerlink" title="开始设置VNC"></a>开始设置VNC</h3><h5 id="1、开启共享桌面程序"><a href="#1、开启共享桌面程序" class="headerlink" title="1、开启共享桌面程序"></a>1、开启共享桌面程序</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt install vino</span><br><span class="line">sudo nano /usr/share/glib-2.0/schemas/org.gnome.Vino.gschema.xml</span><br></pre></td></tr></table></figure>
<h5 id="2、打开xml"><a href="#2、打开xml" class="headerlink" title="2、打开xml"></a>2、打开xml</h5><p>在 schema id=’org.gnome.Vino’ path=’/org/gnome/desktop/remote-access/‘下添加如下代码</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;key name=<span class="string">"enabled"</span> <span class="built_in">type</span>=<span class="string">"b"</span>&gt;</span><br><span class="line">&lt;summary&gt;Enable remote access to the desktop&lt;/summary&gt;</span><br><span class="line">&lt;description&gt;</span><br><span class="line">If <span class="literal">true</span>, allows remote access to the desktop via the RFB</span><br><span class="line">protocol. Users on remote machines may <span class="keyword">then</span> connect to the</span><br><span class="line">desktop using a VNC viewer.</span><br><span class="line">&lt;/description&gt;</span><br><span class="line">&lt;default&gt;<span class="literal">false</span>&lt;/default&gt;</span><br><span class="line">&lt;/key&gt;</span><br></pre></td></tr></table></figure>
<p><img src="/2020/03/25/Jetson%E5%BC%80%E5%90%AFVNC/%5Cimages%5Cpasted-7.png%5C" alt="完成效果"></p>
<h5 id="3、重新编译"><a href="#3、重新编译" class="headerlink" title="3、重新编译"></a>3、重新编译</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo glib-compile-schemas /usr/share/glib-2.0/schemas</span><br></pre></td></tr></table></figure>
<h5 id="4、输入以下命令"><a href="#4、输入以下命令" class="headerlink" title="4、输入以下命令"></a>4、输入以下命令</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> DISPLAY=:0</span><br><span class="line">gsettings <span class="built_in">set</span> org.gnome.Vino enabled <span class="literal">true</span></span><br><span class="line">gsettings <span class="built_in">set</span> org.gnome.Vino prompt-enabled <span class="literal">false</span></span><br><span class="line">gsettings <span class="built_in">set</span> org.gnome.Vino require-encryption <span class="literal">false</span></span><br></pre></td></tr></table></figure>
<h5 id="5、设置自启动"><a href="#5、设置自启动" class="headerlink" title="5、设置自启动"></a>5、设置自启动</h5><p>新建脚本服务</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo nano vncserver.sh</span><br></pre></td></tr></table></figure>
<p>脚本中填入如下内容</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment">#command content</span></span><br><span class="line">nohup /usr/lib/vino/vino-server --display=:0 &amp;</span><br><span class="line">nohup xrandr --fb 1280x720 &amp;</span><br><span class="line"><span class="built_in">exit</span> 0</span><br></pre></td></tr></table></figure>
<p>更改权限</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo chmod a+x vncserver.sh</span><br></pre></td></tr></table></figure>
<p>添加到自启动</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo nano /etc/profile</span><br></pre></td></tr></table></figure>
<p>在末尾处添加如下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/home/jetbot/vncserver.sh</span><br></pre></td></tr></table></figure>
<h5 id="6、重启-电脑端VNC输入IP地址-全部完成-Over！！！！"><a href="#6、重启-电脑端VNC输入IP地址-全部完成-Over！！！！" class="headerlink" title="6、重启 电脑端VNC输入IP地址 全部完成 Over！！！！"></a>6、重启 电脑端VNC输入IP地址 全部完成 Over！！！！</h5>]]></content>
      <tags>
        <tag>Ubantu</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo写作文章操作</title>
    <url>/2020/03/14/Hexo%E5%86%99%E4%BD%9C%E6%96%87%E7%AB%A0%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<p>Hexo 写作操作步骤</p>
<a id="more"></a>

<h2 id="使用-Hexo-Admin-插件编写文章"><a href="#使用-Hexo-Admin-插件编写文章" class="headerlink" title="使用 Hexo Admin 插件编写文章"></a>使用 Hexo Admin 插件编写文章</h2><h3 id="安装Hexo-Admin插件"><a href="#安装Hexo-Admin插件" class="headerlink" title="安装Hexo Admin插件"></a>安装Hexo Admin插件</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install --save hexo-admin</span><br></pre></td></tr></table></figure>
<h3 id="启动本地服务进行编写"><a href="#启动本地服务进行编写" class="headerlink" title="启动本地服务进行编写"></a>启动本地服务进行编写</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo server -d</span><br><span class="line">浏览器打开 http://localhost:4000/admin/</span><br></pre></td></tr></table></figure>
<h3 id="文章中添加超链接"><a href="#文章中添加超链接" class="headerlink" title="文章中添加超链接"></a>文章中添加超链接</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">文章适当位置放入  More info: [链接名称](链接地址)</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="添加图片"><a href="#添加图片" class="headerlink" title="添加图片"></a>添加图片</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">直接粘贴图片到文章中，后续在souce-&gt;_posts下创建同名文件夹将图片放到该目录下，图片默认在images文件夹下。</span><br><span class="line">打开文章.md 在引入图片处输入图片名称即可，如图。</span><br></pre></td></tr></table></figure>
<p><img src="/2020/03/14/Hexo%E5%86%99%E4%BD%9C%E6%96%87%E7%AB%A0%E6%93%8D%E4%BD%9C/pasted-5.png" alt="在_posts文件夹下创建文件夹"><br><img src="/2020/03/14/Hexo%E5%86%99%E4%BD%9C%E6%96%87%E7%AB%A0%E6%93%8D%E4%BD%9C/pasted-4.png" alt="引入图片方式"></p>
<h3 id="添加等级目录"><a href="#添加等级目录" class="headerlink" title="添加等级目录"></a>添加等级目录</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">在文字前添加 <span class="comment"># 即可最多六级井号和文字之间有一个空格 如 ###### 这是六级</span></span><br></pre></td></tr></table></figure>
<h3 id="添加摘要"><a href="#添加摘要" class="headerlink" title="添加摘要"></a>添加摘要</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">在文章适当位置放入&lt;!-- more --&gt; 摘要部分放到该标识符之前！</span><br></pre></td></tr></table></figure>
<h3 id="发布博客"><a href="#发布博客" class="headerlink" title="发布博客"></a>发布博客</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubantu挂载多摄像头监控</title>
    <url>/2020/03/14/bantu%E6%8C%82%E8%BD%BD%E5%A4%9A%E6%91%84%E5%83%8F%E5%A4%B4%E7%9B%91%E6%8E%A7/</url>
    <content><![CDATA[<p>Ubantu下使用OPencv结合Blynk挂载多摄像头进行监控！树莓派同样适用。</p>
<a id="more"></a>
<h2 id="Ubantu下挂载多摄像头使用Blynk进行切换局域网进行监控"><a href="#Ubantu下挂载多摄像头使用Blynk进行切换局域网进行监控" class="headerlink" title="Ubantu下挂载多摄像头使用Blynk进行切换局域网进行监控"></a>Ubantu下挂载多摄像头使用Blynk进行切换局域网进行监控</h2><p>废话不多说开始折腾！！<br>简单说一下Blynk是用来操作物联网的，不知道的自行百度哦！这里我们的监控是本地局域网的，如果个人有服务器可以按照步骤架设到服务器端。</p>
<h5 id="挂载摄像头"><a href="#挂载摄像头" class="headerlink" title="挂载摄像头"></a>挂载摄像头</h5><p>第一步当然是将摄像头连接到ubantu设备，这里使用树莓派是可以的，接下来检测摄像头是否已经挂载，可以挂载多个有几个USB口就可以挂载几个。</p>
<h6 id="1、打开终端输入命令查看摄像头是否挂载"><a href="#1、打开终端输入命令查看摄像头是否挂载" class="headerlink" title="1、打开终端输入命令查看摄像头是否挂载"></a>1、打开终端输入命令查看摄像头是否挂载</h6><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ lsusb</span><br></pre></td></tr></table></figure>
<p><img src="/2020/03/14/bantu%E6%8C%82%E8%BD%BD%E5%A4%9A%E6%91%84%E5%83%8F%E5%A4%B4%E7%9B%91%E6%8E%A7/pasted-0.png" alt="输出结果"></p>
<h5 id="安装nginx"><a href="#安装nginx" class="headerlink" title="安装nginx"></a>安装nginx</h5><p>nginx是我们这里的关键用来建立服务器将视频推流到客户端</p>
<h6 id="1、安装依赖库"><a href="#1、安装依赖库" class="headerlink" title="1、安装依赖库"></a>1、安装依赖库</h6><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo apt-get install build-essential libpcre3 libpcre3-dev libssl-dev</span><br><span class="line">$ sudo apt-get install zlib1g-dev</span><br><span class="line">$ sudo apt-get install openssl</span><br><span class="line">$ sudo apt install gcc</span><br></pre></td></tr></table></figure>
<h6 id="2、建立工作目录"><a href="#2、建立工作目录" class="headerlink" title="2、建立工作目录"></a>2、建立工作目录</h6><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ mkdir ~/working</span><br><span class="line">$ <span class="built_in">cd</span> ~/working</span><br></pre></td></tr></table></figure>
<h6 id="3、下载-nginx-和-nginx-rtmp源码"><a href="#3、下载-nginx-和-nginx-rtmp源码" class="headerlink" title="3、下载 nginx 和 nginx-rtmp源码"></a>3、下载 nginx 和 nginx-rtmp源码</h6><p>这里我们使用源码的方式进行安装,由于我使用的是ubantu 18.04.2所以下载的是最新版的nginx，这里保证nginx是最新版应该就不会出现问题，这里使用的是1.17.9版本。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ wget http://nginx.org/download/nginx-1.17.9.tar.gz</span><br><span class="line">$ wget https://github.com/arut/nginx-rtmp-module/archive/master.zip</span><br></pre></td></tr></table></figure>
<h6 id="4、安装解压工具"><a href="#4、安装解压工具" class="headerlink" title="4、安装解压工具"></a>4、安装解压工具</h6><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo apt-get install unzip</span><br></pre></td></tr></table></figure>
<h6 id="5、解压-nginx-和-nginx-rtmp安装包"><a href="#5、解压-nginx-和-nginx-rtmp安装包" class="headerlink" title="5、解压 nginx 和 nginx-rtmp安装包"></a>5、解压 nginx 和 nginx-rtmp安装包</h6><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ tar -zxvf nginx-1.17.9.tar.gz</span><br><span class="line">$ unzip master.zip</span><br></pre></td></tr></table></figure>
<h6 id="6、切换到-nginx-目录"><a href="#6、切换到-nginx-目录" class="headerlink" title="6、切换到 nginx-目录"></a>6、切换到 nginx-目录</h6><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> nginx-1.17.9</span><br></pre></td></tr></table></figure>
<h6 id="7、添加-nginx-rtmp-模板编译到-nginx"><a href="#7、添加-nginx-rtmp-模板编译到-nginx" class="headerlink" title="7、添加 nginx-rtmp 模板编译到 nginx"></a>7、添加 nginx-rtmp 模板编译到 nginx</h6><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ./configure --with-http_ssl_module --add-module=../nginx-rtmp-module-master</span><br></pre></td></tr></table></figure>
<h6 id="8、编译安装"><a href="#8、编译安装" class="headerlink" title="8、编译安装"></a>8、编译安装</h6><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo make</span><br><span class="line">$ sudo make install</span><br></pre></td></tr></table></figure>
<h6 id="9、安装nginx-init-脚本"><a href="#9、安装nginx-init-脚本" class="headerlink" title="9、安装nginx init 脚本"></a>9、安装nginx init 脚本</h6><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo wget https://raw.github.com/JasonGiedymin/nginx-init-ubuntu/master/nginx -O /etc/init.d/nginx</span><br><span class="line">$ sudo chmod +x /etc/init.d/nginx</span><br><span class="line">$ sudo update-rc.d nginx defaults</span><br></pre></td></tr></table></figure>
<h6 id="10、启动和停止nginx-服务，生成配置文件"><a href="#10、启动和停止nginx-服务，生成配置文件" class="headerlink" title="10、启动和停止nginx 服务，生成配置文件"></a>10、启动和停止nginx 服务，生成配置文件</h6><p>此处可能会有错误，无需管它继续往下就行。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo service nginx start</span><br><span class="line">$ sudo service nginx stop</span><br></pre></td></tr></table></figure>
<h5 id="11、安装-FFmpeg"><a href="#11、安装-FFmpeg" class="headerlink" title="11、安装 FFmpeg"></a>11、安装 FFmpeg</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo apt-add-repository ppa:jon-severinsson/ffmpeg</span><br><span class="line">$ sudo apt-get update</span><br><span class="line">$ sudo apt-get install ffmpeg</span><br></pre></td></tr></table></figure>
<h6 id="12、配置-nginx-rtmp-服务器"><a href="#12、配置-nginx-rtmp-服务器" class="headerlink" title="12、配置 nginx-rtmp 服务器"></a>12、配置 nginx-rtmp 服务器</h6><p>打开 /usr/local/nginx/conf/nginx.conf,这里使用的是nano编辑器，如果提示没有nano请自行百度安装。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo nano /usr/<span class="built_in">local</span>/nginx/conf/nginx.conf</span><br></pre></td></tr></table></figure>
<p>在末尾添加如下 配置,其中的listen是服务器的端口号更改或者默认都行！</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ rtmp &#123;</span><br><span class="line">    server &#123;</span><br><span class="line">            listen 1935;</span><br><span class="line">            chunk_size 4096;</span><br><span class="line"></span><br><span class="line">            application live &#123;</span><br><span class="line">                    live on;</span><br><span class="line">                    record off;</span><br><span class="line">                    <span class="built_in">exec</span> ffmpeg -i rtmp://localhost/live/<span class="variable">$name</span> -threads 1 -c:v libx264 -profile:v baseline -b:v 350K -s 640x360 -f flv -c:a aac -ac 1 -strict -2 -b:a 56k rtmp://localhost/live360p/<span class="variable">$name</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            application live360p &#123;</span><br><span class="line">                    live on;</span><br><span class="line">                    record off;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="13、启动服务器"><a href="#13、启动服务器" class="headerlink" title="13、启动服务器"></a>13、启动服务器</h5><p>文件编辑后保存然后启动服务</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> ~</span><br><span class="line">$ <span class="built_in">cd</span> /usr/<span class="built_in">local</span>/nginx/sbin</span><br><span class="line">$ sudo ./nginx</span><br></pre></td></tr></table></figure>
<h5 id="14、查看是否启动成功"><a href="#14、查看是否启动成功" class="headerlink" title="14、查看是否启动成功"></a>14、查看是否启动成功</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ps -ef|grep nginx</span><br></pre></td></tr></table></figure>
<p><img src="/2020/03/14/bantu%E6%8C%82%E8%BD%BD%E5%A4%9A%E6%91%84%E5%83%8F%E5%A4%B4%E7%9B%91%E6%8E%A7/pasted-1.png" alt="表示启动成功"></p>
<h5 id="代码部分"><a href="#代码部分" class="headerlink" title="代码部分"></a>代码部分</h5><p>该部分代码在Ubantu系统上运行，代码直接贴上来自行修改！<br>修改代码中的Blynk授权码，Blynk服务器地址，机器IP地址，代码中已经使用文字提示。这里要使用的库如果没有自行安装这里不做安装教程！</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">import cv2</span><br><span class="line">import queue</span><br><span class="line">import os</span><br><span class="line">import numpy as np</span><br><span class="line">from threading import Thread</span><br><span class="line">import datetime, _thread</span><br><span class="line">import subprocess as sp</span><br><span class="line">import time</span><br><span class="line">import blynklib</span><br><span class="line"></span><br><span class="line">blynk=blynklib.Blynk(<span class="string">"修改为你的Blynk授权码"</span>,server=<span class="string">"Blynk服务器地址"</span>,port=8080)</span><br><span class="line"></span><br><span class="line">@blynk.handle_event(<span class="string">'write V1'</span>)</span><br><span class="line">def write_virtual_pin_handler(pin,_value):</span><br><span class="line">    global index</span><br><span class="line">    global iscreat</span><br><span class="line">    iscreat=1</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(0,len(_value)):</span><br><span class="line">        try:</span><br><span class="line">            _value[i]=<span class="built_in">eval</span>(_value[i])</span><br><span class="line">        except:pass</span><br><span class="line">    <span class="keyword">if</span> len(_value)==1:_value=_value[0]</span><br><span class="line">    index=_value</span><br><span class="line">    pass</span><br><span class="line">mutex = _thread.allocate_lock()</span><br><span class="line">frame_queue = queue.Queue()</span><br><span class="line"><span class="comment"># 推流的地址，前端通过这个地址拉流，主机的IP，1935是ffmpeg在nginx中设置的端口号</span></span><br><span class="line">rtmpUrl = <span class="string">"rtmp://修改你的机器IP地址:1935/live/1"</span></span><br><span class="line"><span class="built_in">command</span> = [<span class="string">'ffmpeg'</span>,</span><br><span class="line">           <span class="string">'-y'</span>,</span><br><span class="line">           <span class="string">'-f'</span>, <span class="string">'rawvideo'</span>,</span><br><span class="line">           <span class="string">'-vcodec'</span>, <span class="string">'rawvideo'</span>,</span><br><span class="line">           <span class="string">'-pix_fmt'</span>, <span class="string">'bgr24'</span>,</span><br><span class="line">           <span class="string">'-s'</span>, <span class="string">"&#123;&#125;x&#123;&#125;"</span>.format(640, 480),  <span class="comment"># 图片分辨率</span></span><br><span class="line">           <span class="string">'-r'</span>, str(25.0),  <span class="comment"># 视频帧率</span></span><br><span class="line">           <span class="string">'-i'</span>, <span class="string">'-'</span>,</span><br><span class="line">           <span class="string">'-c:v'</span>, <span class="string">'libx264'</span>,</span><br><span class="line">           <span class="string">'-pix_fmt'</span>, <span class="string">'yuv420p'</span>,</span><br><span class="line">           <span class="string">'-preset'</span>, <span class="string">'ultrafast'</span>,</span><br><span class="line">           <span class="string">'-f'</span>, <span class="string">'flv'</span>,</span><br><span class="line">           rtmpUrl]</span><br><span class="line"></span><br><span class="line">flag=0</span><br><span class="line">def Video():</span><br><span class="line">    global index</span><br><span class="line">    global iscreat</span><br><span class="line">    index=0</span><br><span class="line">    iscreat=0</span><br><span class="line">    vid = cv2.VideoCapture(0)</span><br><span class="line">    <span class="keyword">if</span> not vid.isOpened():</span><br><span class="line">        raise IOError(<span class="string">"Couldn't open webcam or video"</span>)</span><br><span class="line">    <span class="keyword">while</span> (vid.isOpened()):</span><br><span class="line">        <span class="keyword">if</span> iscreat:</span><br><span class="line">            vid.release()</span><br><span class="line">            iscreat=0</span><br><span class="line">        <span class="keyword">if</span> index==1:</span><br><span class="line">            vid=cv2.VideoCapture(0)</span><br><span class="line">            index=0</span><br><span class="line">        <span class="keyword">elif</span> index==2:</span><br><span class="line">            vid = cv2.VideoCapture(1)</span><br><span class="line">            index = 0</span><br><span class="line">        <span class="keyword">elif</span> index==3:</span><br><span class="line">            vid = cv2.VideoCapture(2)</span><br><span class="line">            index = 0</span><br><span class="line">        return_value, frame = vid.read()</span><br><span class="line">        frame_queue.put(frame)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def push_frame():</span><br><span class="line">    accum_time = 0</span><br><span class="line">    curr_fps = 0</span><br><span class="line">    fps = <span class="string">"FPS: ??"</span></span><br><span class="line">    <span class="keyword">while</span> True:</span><br><span class="line">        <span class="keyword">if</span> len(<span class="built_in">command</span>) &gt; 0:</span><br><span class="line">            p = sp.Popen(<span class="built_in">command</span>, stdin=sp.PIPE)</span><br><span class="line">            <span class="built_in">break</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> True:</span><br><span class="line">        blynk.run()</span><br><span class="line">        <span class="keyword">if</span> frame_queue.empty() != True:</span><br><span class="line">            frame = frame_queue.get()</span><br><span class="line">            <span class="comment"># curr_time = timer()</span></span><br><span class="line">            <span class="comment"># exec_time = curr_time - prev_time</span></span><br><span class="line">            <span class="comment"># prev_time = curr_time</span></span><br><span class="line">            <span class="comment"># accum_time = accum_time + exec_time</span></span><br><span class="line">            <span class="comment"># curr_fps = curr_fps + 1</span></span><br><span class="line"></span><br><span class="line">            <span class="comment"># process frame</span></span><br><span class="line">            <span class="comment"># 你处理图片的代码</span></span><br><span class="line">            <span class="comment"># 将图片从队列中取出来做处理，然后再通过管道推送到服务器上</span></span><br><span class="line">            <span class="comment"># 增加画面帧率</span></span><br><span class="line">            <span class="comment"># if accum_time &gt; 1:</span></span><br><span class="line">            <span class="comment"># accum_time = accum_time - 1</span></span><br><span class="line">            <span class="comment"># fps = "FPS: " + str(curr_fps)</span></span><br><span class="line">            <span class="comment"># curr_fps = 0</span></span><br><span class="line"></span><br><span class="line">            <span class="comment"># write to pipe</span></span><br><span class="line">            <span class="comment"># 将处理后的图片通过管道推送到服务器上,image是处理后的图片</span></span><br><span class="line">            p.stdin.write(frame.tostring())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def run():</span><br><span class="line">    <span class="comment"># 使用两个线程处理</span></span><br><span class="line"></span><br><span class="line">    thread1 = Thread(target=Video, )</span><br><span class="line">    thread1.start()</span><br><span class="line">    thread2 = Thread(target=push_frame, )</span><br><span class="line">    thread2.start()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    run()</span><br></pre></td></tr></table></figure>
<h5 id="Blynk-App设置"><a href="#Blynk-App设置" class="headerlink" title="Blynk App设置"></a>Blynk App设置</h5><p>代码中的Blynk授权码来自于Blynk App创建的工程中，百度！！！！<br>创建一个Blynk工程分别添加两个组件 </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Video Stream 组件</span><br><span class="line">Segmented Switch 组件</span><br></pre></td></tr></table></figure>
<p>组件设置如下</p>
<p><img src="/2020/03/14/bantu%E6%8C%82%E8%BD%BD%E5%A4%9A%E6%91%84%E5%83%8F%E5%A4%B4%E7%9B%91%E6%8E%A7/pasted-2.png" alt="Video Stream设置"></p>
<p><img src="/2020/03/14/bantu%E6%8C%82%E8%BD%BD%E5%A4%9A%E6%91%84%E5%83%8F%E5%A4%B4%E7%9B%91%E6%8E%A7/pasted-3.png" alt="Segmented Switch设置"><br>这里使用了3个摄像头，所以使用了三个OPTIONS，按照你自己的摄像头数量自行添加或删除，选中你要删除的相机左滑即可删除，如果大于3个摄像头需要修改代码。</p>
<h5 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h5><p>完毕！！</p>
]]></content>
      <tags>
        <tag>Ubantu</tag>
        <tag>Blynk</tag>
      </tags>
  </entry>
</search>
